// ClientsList.js - Component for displaying and managing clients

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
  Search, 
  Plus, 
  Filter, 
  ChevronDown, 
  ArrowUpDown, 
  Edit, 
  Trash2,
  UserPlus,
  Download
} from 'lucide-react';
import apiService from '../api';

const ClientsList = () => {
  const [clients, setClients] = useState([]);
  const [filteredClients, setFilteredClients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterOpen, setFilterOpen] = useState(false);
  const [filters, setFilters] = useState({
    status: 'all',
    goal: 'all',
    sortBy: 'name'
  });

  // Fetch clients on component mount
  useEffect(() => {
    const fetchClients = async () => {
      try {
        // Mock API call - Replace with actual API call
        // const response = await apiService.getAllClients();
        
        // Mock data for demonstration
        const mockClients = [
          {
            id: '1',
            name: 'Meshal Alawein',
            email: 'meshal@example.com',
            phone: '+966 12 345 6789',
            startDate: '2025-04-14',
            status: 'active',
            progress: 21.4,
            goal: 'weight_loss',
            currentWeight: 84.5,
            goalWeight: 80.0,
            checkInDay: 'Monday'
          },
          {
            id: '2',
            name: 'Ahmed Khan',
            email: 'ahmed@example.com',
            phone: '+966 98 765 4321',
            startDate: '2025-03-01',
            status: 'active',
            progress: 45.8,
            goal: 'muscle_gain',
            currentWeight: 75.2,
            goalWeight: 82.0,
            checkInDay: 'Wednesday'
          },
          {
            id: '3',
            name: 'Sara Al-Obaidi',
            email: 'sara@example.com',
            phone: '+966 55 123 7890',
            startDate: '2025-01-15',
            status: 'paused',
            progress: 68.7,
            goal: 'weight_loss',
            currentWeight: 67.3,
            goalWeight: 63.0,
            checkInDay: 'Friday'
          },
          {
            id: '4',
            name: 'Mohammad Saleh',
            email: 'mohammad@example.com',
            phone: '+966 50 987 6543',
            startDate: '2025-02-20',
            status: 'active',
            progress: 32.1,
            goal: 'performance',
            currentWeight: 90.6,
            goalWeight: 88.0,
            checkInDay: 'Sunday'
          },
          {
            id: '5',
            name: 'Fatima Hassan',
            email: 'fatima@example.com',
            phone: '+966 54 321 6789',
            startDate: '2025-03-30',
            status: 'completed',
            progress: 100,
            goal: 'weight_loss',
            currentWeight: 63.0,
            goalWeight: 63.0,
            checkInDay: 'Tuesday'
          }
        ];
        
        setClients(mockClients);
        setFilteredClients(mockClients);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch clients. Please try again.');
        setLoading(false);
      }
    };
    
    fetchClients();
  }, []);

  // Handle search and filtering
  useEffect(() => {
    if (!clients.length) return;
    
    let result = [...clients];
    
    // Apply search term filter
    if (searchTerm) {
      result = result.filter(client => 
        client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        client.email.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Apply status filter
    if (filters.status !== 'all') {
      result = result.filter(client => client.status === filters.status);
    }
    
    // Apply goal filter
    if (filters.goal !== 'all') {
      result = result.filter(client => client.goal === filters.goal);
    }
    
    // Apply sorting
    if (filters.sortBy === 'name') {
      result.sort((a, b) => a.name.localeCompare(b.name));
    } else if (filters.sortBy === 'progress') {
      result.sort((a, b) => b.progress - a.progress);
    } else if (filters.sortBy === 'startDate') {
      result.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));
    }
    
    setFilteredClients(result);
  }, [clients, searchTerm, filters]);

  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // Handle filter change
  const handleFilterChange = (key, value) => {
    setFilters({
      ...filters,
      [key]: value
    });
  };

  // Toggle filter panel
  const toggleFilterPanel = () => {
    setFilterOpen(!filterOpen);
  };

  // Get status badge style
  const getStatusBadge = (status) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'paused':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800
