// ClientContext.js - Context for managing client data across components

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import apiService from './api';

// Create the context
const ClientContext = createContext();

// Create the ClientProvider component
export const ClientProvider = ({ children }) => {
  // Client data state
  const [clientData, setClientData] = useState(null);
  const [measurements, setMeasurements] = useState([]);
  const [nutritionProtocol, setNutritionProtocol] = useState(null);
  const [weeklyPlanner, setWeeklyPlanner] = useState([]);
  const [goals, setGoals] = useState(null);
  const [healthMarkers, setHealthMarkers] = useState(null);
  const [supplements, setSupplements] = useState([]);
  const [pedProgram, setPedProgram] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [clientId, setClientId] = useState(null);

  // Function to fetch all client data
  const fetchAllClientData = useCallback(async (id) => {
    if (!id) return;
    
    setLoading(true);
    try {
      // Fetch all data in parallel
      const [
        clientDataResponse,
        measurementsResponse,
        nutritionResponse,
        checkInsResponse,
        goalsResponse,
        healthMarkersResponse,
        supplementsResponse,
        pedProgramResponse
      ] = await Promise.all([
        apiService.getClientData(id),
        apiService.getClientMeasurements(id),
        apiService.getNutritionProtocol(id),
        apiService.getWeeklyCheckIns(id),
        apiService.getClientGoals(id),
        apiService.getHealthMarkers(id),
        apiService.getSupplements(id),
        apiService.getPEDProgram(id)
      ]);

      // Update state with fetched data
      setClientData(clientDataResponse);
      setMeasurements(measurementsResponse);
      setNutritionProtocol(nutritionResponse);
      setWeeklyPlanner(checkInsResponse);
      setGoals(goalsResponse);
      setHealthMarkers(healthMarkersResponse);
      setSupplements(supplementsResponse);
      setPedProgram(pedProgramResponse);
      setError(null);
    } catch (err) {
      console.error('Error fetching client data:', err);
      setError('Failed to load client data. Please try again later.');
    } finally {
      setLoading(false);
    }
  }, []);

  // Load client data when clientId changes
  useEffect(() => {
    if (clientId) {
      fetchAllClientData(clientId);
    }
  }, [clientId, fetchAllClientData]);

  // Function to load a specific client
  const loadClient = (id) => {
    setClientId(id);
  };

  // Function to update client information
  const updateClientInfo = async (updatedData) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updateClientData(clientId, updatedData);
      setClientData({
        ...clientData,
        ...response
      });
      return response;
    } catch (err) {
      setError('Failed to update client information');
      throw err;
    }
  };

  // Function to update measurements
  const updateMeasurements = async (newMeasurement) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.addMeasurement(clientId, newMeasurement);
      setMeasurements([...measurements, response]);
      return response;
    } catch (err) {
      setError('Failed to update measurements');
      throw err;
    }
  };

  // Function to update nutrition protocol
  const updateNutrition = async (updatedNutrition) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updateNutritionProtocol(clientId, updatedNutrition);
      setNutritionProtocol(response);
      return response;
    } catch (err) {
      setError('Failed to update nutrition protocol');
      throw err;
    }
  };

  // Function to submit weekly check-in
  const submitWeeklyCheckIn = async (checkInData) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.submitWeeklyCheckIn(clientId, checkInData);
      setWeeklyPlanner([...weeklyPlanner, response]);
      return response;
    } catch (err) {
      setError('Failed to submit weekly check-in');
      throw err;
    }
  };

  // Function to update goals
  const updateGoals = async (updatedGoals) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updateClientGoals(clientId, updatedGoals);
      setGoals(response);
      return response;
    } catch (err) {
      setError('Failed to update goals');
      throw err;
    }
  };

  // Function to update health markers
  const updateHealthMarkers = async (updatedMarkers) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updateHealthMarkers(clientId, updatedMarkers);
      setHealthMarkers(response);
      return response;
    } catch (err) {
      setError('Failed to update health markers');
      throw err;
    }
  };

  // Function to update supplements
  const updateSupplements = async (updatedSupplements) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updateSupplements(clientId, updatedSupplements);
      setSupplements(response);
      return response;
    } catch (err) {
      setError('Failed to update supplements');
      throw err;
    }
  };

  // Function to update PED program (with additional validation)
  const updatePedProgram = async (updatedPedProgram) => {
    if (!clientId) return;
    
    try {
      const response = await apiService.updatePEDProgram(clientId, updatedPedProgram);
      setPedProgram(response);
      return response;
    } catch (err) {
      setError('Failed to update PED program');
      throw err;
    }
  };

  // Calculate compliance percentages
  const calculateCompliance = useCallback(() => {
    if (!weeklyPlanner || weeklyPlanner.length === 0) {
      return {
        nutrition: 0,
        training: 0,
        cardio: 0,
        steps: 0,
        overall: 0
      };
    }

    // Calculate compliance metrics
    const nutritionCompliance = weeklyPlanner.filter(day => 
      day.nutritionCompliance === true).length / weeklyPlanner.length * 100;
    
    const trainingDays = weeklyPlanner.filter(day => 
      day.training !== 'OFF');
    const trainingCompliance = trainingDays.filter(day => 
      day.completed === true).length / trainingDays.length * 100;
    
    const totalCardioGoal = weeklyPlanner.reduce((sum, day) => sum + day.cardioGoal, 0);
    const totalCardioActual = weeklyPlanner.reduce((sum, day) => sum + day.cardioActual, 0);
    const cardioCompliance = totalCardioGoal > 0 ? (totalCardioActual / totalCardioGoal * 100) : 100;
    
    const totalStepsGoal = weeklyPlanner.reduce((sum, day) => sum + day.stepsGoal, 0);
    const totalStepsActual = weeklyPlanner.reduce((sum, day) => sum + day.stepsActual, 0);
    const stepsCompliance = totalStepsGoal > 0 ? (totalStepsActual / totalStepsGoal * 100) : 100;
    
    // Calculate overall compliance
    const overall = (
      nutritionCompliance * 0.4 + 
      trainingCompliance * 0.3 + 
      cardioCompliance * 0.15 + 
      stepsCompliance * 0.15
    );

    return {
      nutrition: parseFloat(nutritionCompliance.toFixed(1)),
      training: parseFloat(trainingCompliance.toFixed(1)),
      cardio: parseFloat(cardioCompliance.toFixed(1)),
      steps: parseFloat(stepsCompliance.toFixed(1)),
      overall: parseFloat(overall.toFixed(1))
    };
  }, [weeklyPlanner]);

  // Value object to provide through context
  const contextValue = {
    // Data
    clientData,
    measurements,
    nutritionProtocol,
    weeklyPlanner,
    goals,
    healthMarkers,
    supplements,
    pedProgram,
    
    // Status
    loading,
    error,
    
    // Functions
    loadClient,
    fetchAllClientData,
    updateClientInfo,
    updateMeasurements,
    updateNutrition,
    submitWeeklyCheckIn,
    updateGoals,
    updateHealthMarkers,
    updateSupplements,
    updatePedProgram,
    calculateCompliance
  };

  return (
    <ClientContext.Provider value={contextValue}>
      {children}
    </ClientContext.Provider>
  );
};

// Custom hook for using the client context
export const useClientContext = () => {
  const context = useContext(ClientContext);
  
  if (!context) {
    throw new Error('useClientContext must be used within a ClientProvider');
  }
  
  return context;
};

export default ClientContext;
